// This file is auto-generated by @hey-api/openapi-ts

import { type Options, get, deleteTasksById, getTasksById, putTasksById, getTasks, postTasks } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, type DefaultError } from '@tanstack/react-query';
import type { GetData, DeleteTasksByIdData, DeleteTasksByIdResponse, GetTasksByIdData, PutTasksByIdData, PutTasksByIdResponse, GetTasksData, PostTasksData, PostTasksResponse } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const getQueryKey = (options?: Options<GetData>) => createQueryKey('get', options);

/**
 * Hello World
 */
export const getOptions = (options?: Options<GetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await get({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getQueryKey(options)
    });
};

/**
 * Delete a task by ID
 */
export const deleteTasksByIdMutation = (options?: Partial<Options<DeleteTasksByIdData>>): UseMutationOptions<DeleteTasksByIdResponse, DefaultError, Options<DeleteTasksByIdData>> => {
    const mutationOptions: UseMutationOptions<DeleteTasksByIdResponse, DefaultError, Options<DeleteTasksByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await deleteTasksById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTasksByIdQueryKey = (options: Options<GetTasksByIdData>) => createQueryKey('getTasksById', options);

/**
 * Get a task by ID
 */
export const getTasksByIdOptions = (options: Options<GetTasksByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTasksById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTasksByIdQueryKey(options)
    });
};

/**
 * Update a task by ID
 */
export const putTasksByIdMutation = (options?: Partial<Options<PutTasksByIdData>>): UseMutationOptions<PutTasksByIdResponse, DefaultError, Options<PutTasksByIdData>> => {
    const mutationOptions: UseMutationOptions<PutTasksByIdResponse, DefaultError, Options<PutTasksByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await putTasksById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getTasksQueryKey = (options?: Options<GetTasksData>) => createQueryKey('getTasks', options);

/**
 * Get all tasks
 */
export const getTasksOptions = (options?: Options<GetTasksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getTasks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getTasksQueryKey(options)
    });
};

export const postTasksQueryKey = (options: Options<PostTasksData>) => createQueryKey('postTasks', options);

/**
 * Create a new task
 */
export const postTasksOptions = (options: Options<PostTasksData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postTasks({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postTasksQueryKey(options)
    });
};

/**
 * Create a new task
 */
export const postTasksMutation = (options?: Partial<Options<PostTasksData>>): UseMutationOptions<PostTasksResponse, DefaultError, Options<PostTasksData>> => {
    const mutationOptions: UseMutationOptions<PostTasksResponse, DefaultError, Options<PostTasksData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postTasks({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};